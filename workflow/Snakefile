__author__ = "Padraic Corcoran"
__copyright__ = "Copyright 2023, Padraic Corcoran"
__email__ = "padraic.corcoran@scilifelab.uu.se"
__license__ = "GPL-3"

include: "rules/common.smk"
include: "rules/add_ref_to_vcf.smk"
include: "rules/coverage.smk"
include: "rules/peddy.smk"
include: "rules/sample_order_for_multiqc.smk"

report: "report/workflow.rst"


rule all:
    input:
        unpack(compile_output_list),


ruleorder: parabricks_fq2bam > alignment_samtools_index


module alignment:
    snakefile:
        github(
            "hydra-genetics/alignment",
            path="workflow/Snakefile",
            tag=config["modules"]["alignment"],
        )
    config:
        config


use rule * from alignment as alignment_*

module cnv_sv:
    snakefile:
        "/beegfs-storage/projects/wp3/nobackup/Workspace/padraic_testing/cnv_sv/workflow/Snakefile"
        # github(
        #     "hydra-genetics/references",
        #     path="workflow/Snakefile",
        #     tag=config["modules"]["cnv_sv"],
        # )
    config:
        config


use rule exomedepth_call from cnv_sv as cnv_exomedepth_call with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards, use_type_wildcard=False)[0],
        bedfile=config.get("reference", {}).get("design_bed", ""),
        genes=config.get("exomedepth_call", {}).get("exonsfile", ""),
        exons=config.get("exomedepth_call", {}).get("genesfile", ""),
        peddy_sex_check="qc/peddy/peddy.sex_check.csv",
 

module compression:
    snakefile:
        github(
            "hydra-genetics/compression",
            path="workflow/Snakefile",
            tag=config["modules"]["compression"],
        )
    config:
        config


use rule * from compression as compression_*


use rule crumble from compression as compression_crumble

use rule samtools_view from compression as compression_samtools_view with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards, use_sample_wildcard=False)[0],
        bai=lambda wildcards: get_bam_input(wildcards, use_sample_wildcard=False)[1],
        ref=config.get("reference", {}).get("fasta", ""),


use rule spring from compression as compression_spring with:
    output:
        spring=temp("compression/spring/{sample}_{flowcell}_{lane}_{barcode}_{type}.spring"),


# module filtering:
#     snakefile:
#         github("hydra-genetics/filtering", path="workflow/Snakefile", tag="b7f4dc3")
#     config:
#         config


module misc:
    snakefile:
        github("hydra-genetics/misc", path="workflow/Snakefile", tag=config["modules"]["misc"])
    config:
        config


use rule samtools_index from misc as misc_samtools_index with:
    input:
        cram="{file}.crumble.cram",
    output:
        crai=temp("{file}.crumble.cram.crai"),
    params:
        extra=config.get("extra", {}).get("extra", ""),
    log:
        "{file}.crumble.cram.crai.log",
    benchmark:
        repeat(
            "{file}.crumble.cram.crai.benchmark.tsv",
            config.get("samtools_index", {}).get("benchmark_repeats", 1),
        )
    message:
        "{rule}: Index {wildcards.file}.crumble.cram file"


use rule bgzip from misc as misc_bgzip


use rule tabix from misc as misc_tabix


module parabricks:
    snakefile:
        github(
            "hydra-genetics/parabricks",
            path="workflow/Snakefile",
            tag=config["modules"]["parabricks"],
        )
    config:
        config


use rule pbrun_fq2bam from parabricks as parabricks_fq2bam


use rule pbrun_deepvariant from parabricks as parabricks_deepvariant with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards, use_type_wildcard=False)[0],
        bai=lambda wildcards: get_bam_input(wildcards, use_type_wildcard=False)[1],
        fasta=config.get("reference", {}).get("fasta", ""),
        model=config.get("pbrun_deepvariant", {}).get("deepvariant_model", ""),
    output:
        vcf=temp("parabricks/pbrun_deepvariant/{sample}.g.vcf"),
        vcf2=temp("parabricks/pbrun_deepvariant/{sample}.vcf"),

module prealignment:
    snakefile:
        github(
            "hydra-genetics/prealignment",
            path="workflow/Snakefile",
            tag=config["modules"]["prealignment"],
        )
    config:
        config


use rule * from prealignment as prealignment_*


module qc:
    snakefile:
        github(
            "hydra-genetics/qc",
            path="workflow/Snakefile",
            tag=config["modules"]["qc"],
        )
    config:
        config


use rule fastqc from qc as qc_fastqc


use rule mosdepth_bed from qc as qc_mosdepth_bed with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        bed=config.get("reference", {}).get("coverage_bed", ""),
    output:
        bed=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz"),
        bed_csi=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz.csi"),
        glob=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.global.dist.txt"),
        pairbase=temp("qc/mosdepth_bed/{sample}_{type}.per-base.bed.gz"),
        region=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.region.dist.txt"),
        summary=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.summary.txt"),
        thresholds=temp("qc/mosdepth_bed/{sample}_{type}.thresholds.bed.gz"),
    params:
        thresholds="10,20,30",


use rule multiqc from qc as qc_multiqc with:
    input:
        files=lambda wildcards: set(
            [
                file.format(sample=sample, type=u.type, lane=u.lane, flowcell=u.flowcell, barcode=u.barcode, read=read, ext=ext)
                for file in config["multiqc"]["reports"][wildcards.report]["qc_files"]
                for sample in get_samples(samples)
                for u in units.loc[sample].dropna().itertuples()
                if u.type in config["multiqc"]["reports"][wildcards.report]["included_unit_types"]
                for read in ["fastq1", "fastq2"]
                for ext in config.get("picard_collect_multiple_metrics", {}).get("output_ext", [""])
            ]
        ),
        config=lambda wildcards: config["multiqc"]["reports"][wildcards.report]["config"],
        sample_order="qc/multiqc/sample_order.tsv",
        sample_replacement="qc/multiqc/sample_replacement.tsv",
    params:
        extra=lambda wildcards, input: "--replace-names "
        + input.sample_replacement
        + " --sample-names "
        + input.sample_order
        + " -c "
        + input.config,


use rule peddy from qc as qc_peddy


use rule picard_collect_alignment_summary_metrics from qc as qc_pic_align_sum_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        ref=config["reference"]["fasta"],


use rule picard_collect_duplication_metrics from qc as qc_pic_dup_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],


use rule picard_collect_gc_bias_metrics from qc as qc_pic_gc_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        ref=config["reference"]["fasta"],


use rule picard_collect_hs_metrics from qc as qc_pic_hs_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bait_intervals=config["reference"]["design_intervals"],
        target_intervals=config["reference"]["design_intervals"],
        reference=config["reference"]["fasta"],


use rule picard_collect_insert_size_metrics from qc as qc_pic_ins_size with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],


use rule picard_collect_multiple_metrics from qc as qc_pic_multi_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        ref=config["reference"]["fasta"],

use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],


use rule samtools_idxstats from qc as qc_samtools_idxstats with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
    output:
        temp("qc/samtools_idxstats/{sample}_{type}.samtools-idxstats.txt"),


module snv_indels:
    snakefile:
        github(
            "hydra-genetics/snv_indels",
            path="workflow/Snakefile",
            tag=config["modules"]["snv_indels"],
        )
    config:
        config


use rule deepvariant_make_examples from snv_indels as snv_indels_deepvariant_make_examples with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        ref=config.get("reference", {}).get("fasta", ""),
    output:
        examples_dir=temp(directory("snv_indels/deepvariant/{sample}_{type}/")),
    log:
        "snv_indels/deepvariant/{sample}_{type}_make_examples.output.log",
    benchmark:
        repeat(
            "snv_indels/deepvariant/{sample}_{type}_make_examples.output.benchmark.tsv",
            config.get("deepvariant_make_examples", {}).get("benchmark_repeats", 1),
        )
    message:
        "Call variants with deepvariant on {wildcards.sample}_{wildcards.type}"


use rule deepvariant_call_variants from snv_indels as snv_indels_deepvariant_call_variants with:
    input:
        examples_dir="snv_indels/deepvariant/{sample}_{type}/",
    output:
        outfile=temp("snv_indels/deepvariant/{sample}_{type}/call_variants_output.tfrecord.gz"),
    log:
        "snv_indels/deepvariant/{sample}_{type}_call_variants.output.log",
    benchmark:
        repeat(
            "snv_indels/deepvariant/{sample}_{type}_call_variants.output.benchmark.tsv",
            config.get("deepvariant_call_variants", {}).get("benchmark_repeats", 1),
        )


use rule deepvariant_postprocess_variants from snv_indels as snv_indels_deepvariant_postprocess_variants with:
    input:
        examples_dir="snv_indels/deepvariant/{sample}_{type}/",
        infile="snv_indels/deepvariant/{sample}_{type}/call_variants_output.tfrecord.gz",
        ref=config.get("reference", {}).get("fasta", ""),
    output:
        vcf=temp("snv_indels/deepvariant/{sample}_{type}.vcf"),
        gvcf=temp("snv_indels/deepvariant/{sample}_{type}.g.vcf"),
    params:
        extra=lambda wildcards, input, output: get_postprocess_variants_args(
            wildcards,
            input,
            output,
            "deepvariant_make_examples",
            config.get("deepvariant_postprocess_variants", {}).get("extra", ""),
        ),
    log:
        "snv_indels/deepvariant/{sample}_{type}_postprocess_variants.output.log",
    benchmark:
        repeat(
            "snv_indels/deepvariant/{sample}_{type}_postprocess_variants.output.benchmark.tsv",
            config.get("deepvariant_postprocess_variants", {}).get("benchmark_repeats", 1),
        )
