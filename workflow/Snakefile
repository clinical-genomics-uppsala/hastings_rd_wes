__author__ = "Padraic Corcoran, Jessika Nordin"
__copyright__ = "Copyright 2023, Padraic Corcoran"
__email__ = "padraic.corcoran@scilifelab.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"
include: "rules/add_ref_to_vcf.smk"
include: "rules/coverage.smk"
include: "rules/exomedepth_export.smk"
include: "rules/peddy.smk"
include: "rules/tsv2vcf.smk"


report: "report/workflow.rst"


rule all:
    input:
        unpack(compile_output_list),


if config["output"] == "config/output_list.json":


    ruleorder: _copy_samtools_crai > compression_samtools_index
    ruleorder: _copy_snv_indels_vcf > snv_indels_bgzip
    ruleorder: _copy_snv_indels_tbi > snv_indels_tabix
    ruleorder: _copy_snv_indels_tbi > snv_indels_tabix_fix_af
    ruleorder: _copy_snv_indels_vcf > snv_indels_bgzip_fix_af
    ruleorder: cnv_sv_bgzip > cnv_sv_melt
    ruleorder: parabricks_fq2bam > alignment_samtools_index
    ruleorder: snv_indels_glnexus_trio > snv_indels_glnexus
    ruleorder: snv_indels_tabix > snv_indels_tabix_fix_af
    ruleorder: cnv_sv_bgzip > snv_indels_bgzip_fix_af


module alignment:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/alignment",
            path="workflow/Snakefile",
            tag=config["modules"]["alignment"],
        )
    config:
        config


use rule * from alignment as alignment_*


module annotation:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/annotation",
            path="workflow/Snakefile",
            tag=config["modules"]["annotation"],
        )
    config:
        config


use rule vep from annotation as annotation_vep_trio with:
    input:
        cache=config.get("vep_trio", {}).get("vep_cache", ""),
        fasta=config["reference"]["fasta"],
        vcf="snv_indels/glnexus/{sample}_{type}.decomposed.vcf.gz",
    output:
        vcf=temp("snv_indels/glnexus/{sample}_{type}.vep_annotated.vcf"),
    params:
        extra=config.get("vep_trio", {}).get("extra", "--pick"),
        mode=config.get("vep_trio", {}).get("mode", "--offline --cache"),
    log:
        "snv_indels/glnexus/{sample}_{type}.vep_annotated.vcf.log",
    benchmark:
        repeat(
            "snv_indels/glnexus/{sample}_{type}.vep_annotated.vcf.benchmark.tsv",
            config.get("vep", {}).get("benchmark_repeats", 1),
        )
    container:
        config.get("vep_trio", {}).get("container", config["default_container"])


module cnv_sv:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/cnv_sv",
            path="workflow/Snakefile",
            tag=config["modules"]["cnv_sv"],
        )
    config:
        config


use rule * from cnv_sv as cnv_sv_*


use rule exomedepth_call from cnv_sv as cnv_sv_exomedepth_call with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        bedfile=config.get("exomedepth_call", {}).get("bedfile", ""),
        genes=config.get("exomedepth_call", {}).get("genesfile", ""),
        exons=config.get("exomedepth_call", {}).get("exonsfile", ""),
        sex="qc/peddy/peddy.sex_check-checkpoint.csv",
        ref_count=get_exomedepth_ref,


use rule automap from cnv_sv as cnv_sv_automap with:
    input:
        vcf="vcf_final/{sample}_{type}.vcf",


use rule melt from cnv_sv as cnv_sv_melt with:
    output:
        alu="cnv_sv/melt/{sample}_{type}/ALU.final_comp.vcf",
        hervk="cnv_sv/melt/{sample}_{type}/HERVK.final_comp.vcf",
        line1="cnv_sv/melt/{sample}_{type}/LINE1.final_comp.vcf",
        sva="cnv_sv/melt/{sample}_{type}/SVA.final_comp.vcf",
        tmpdir=directory("cnv_sv/melt/{sample}_{type}"),


module compression:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/compression",
            path="workflow/Snakefile",
            tag=config["modules"]["compression"],
        )
    config:
        config


use rule * from compression as compression_*


use rule samtools_view from compression as compression_samtools_view with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards, use_sample_wildcard=False)[0],
        bai=lambda wildcards: get_bam_input(wildcards, use_sample_wildcard=False)[1],
        ref=config.get("reference", {}).get("fasta", ""),


module filtering:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/filtering", path="workflow/Snakefile", tag=config["modules"]["filtering"])
    config:
        config


use rule bcftools_view from filtering as filtering_bcftools_view_deepvariant with:
    input:
        vcf="vcf_final/{sample}_{type}.fix_af.vcf.gz",
        tbi="vcf_final/{sample}_{type}.fix_af.vcf.gz.tbi",
        regions=config.get("bcftools_view_deepvariant", {}).get("regions", ""),
    output:
        vcf=temp("snv_indels/bcftools_view/{sample}_{type}.vcf"),
    log:
        "snv_indels/bcftools_view/{sample}_{type}.vcf.log",
    params:
        extra=config.get("bcftools_view_deepvariant", {}).get("extra", ""),
    benchmark:
        repeat(
            "snv_indels/bcftools_view/{sample}_{type}.vcf.benchmark.tsv",
            config.get("bcftools_view", {}).get("benchmark_repeats", 1),
        )


use rule bcftools_view from filtering as filtering_bcftools_view_deepsomatic with:
    input:
        vcf="snv_indels/deepsomatic_t_only/{sample}_{type}.vcf.gz",
        tbi="snv_indels/deepsomatic_t_only/{sample}_{type}.vcf.gz.tbi",
    output:
        vcf=temp("snv_indels/bcftools_view/{sample}_{type}.ds.vcf.gz"),
    log:
        "snv_indels/bcftools_view/{sample}_{type}.ds.vcf.log",
    params:
        extra=config.get("bcftools_view_deepsomatic", {}).get("extra", ""),
    benchmark:
        repeat(
            "snv_indels/bcftools_view/{sample}_{type}.ds.benchmark.tsv",
            config.get("bcftools_view", {}).get("benchmark_repeats", 1),
        )


module parabricks:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/parabricks",
            path="workflow/Snakefile",
            tag=config["modules"]["parabricks"],
        )
    config:
        config


use rule pbrun_fq2bam from parabricks as parabricks_fq2bam


use rule pbrun_deepvariant from parabricks as parabricks_deepvariant with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        fasta=config.get("reference", {}).get("fasta", ""),
    output:
        vcf=temp("parabricks/pbrun_deepvariant/{sample}_{type}.g.vcf"),
        vcf2=temp("parabricks/pbrun_deepvariant/{sample}_{type}.vcf"),


module prealignment:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/prealignment",
            path="workflow/Snakefile",
            tag=config["modules"]["prealignment"],
        )
    config:
        config


use rule * from prealignment as prealignment_*


module qc:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/qc",
            path="workflow/Snakefile",
            tag=config["modules"]["qc"],
        )
    config:
        config


use rule fastqc from qc as qc_fastqc


use rule mosdepth_bed from qc as qc_mosdepth_bed_design with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        bed=config.get("reference", {}).get("design_bed", ""),
    output:
        bed=temp("qc/mosdepth_bed_design/{sample}_{type}.regions.bed.gz"),
        bed_csi=temp("qc/mosdepth_bed_design/{sample}_{type}.regions.bed.gz.csi"),
        glob=temp("qc/mosdepth_bed_design/{sample}_{type}.mosdepth.global.dist.txt"),
        pairbase=temp("qc/mosdepth_bed_design/{sample}_{type}.per-base.bed.gz"),
        pairbase_csi=temp("qc/mosdepth_bed_design/{sample}_{type}.per-base.bed.gz.csi"),
        region=temp("qc/mosdepth_bed_design/{sample}_{type}.mosdepth.region.dist.txt"),
        summary=temp("qc/mosdepth_bed_design/{sample}_{type}.mosdepth.summary.txt"),
    params:
        extra=config.get("mosdepth_bed_design", {}).get("extra", ""),
    log:
        "qc/mosdepth_bed_design/{sample}_{type}.mosdepth.summary.txt.log",
    benchmark:
        repeat(
            "qc/mosdepth_bed_design/{sample}_{type}.mosdepth.summary.txt.benchmark.tsv",
            config.get("mosdepth_bed_design", {}).get("benchmark_repeats", 1),
        )


use rule mosdepth_bed from qc as qc_mosdepth_bed_coverage with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        bed=config.get("reference", {}).get("coverage_bed", ""),
    output:
        bed=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz"),
        bed_csi=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz.csi"),
        glob=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.global.dist.txt"),
        pairbase=temp("qc/mosdepth_bed/{sample}_{type}.per-base.bed.gz"),
        pairbase_csi=temp("qc/mosdepth_bed/{sample}_{type}.per-base.bed.gz.csi"),
        region=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.region.dist.txt"),
        summary=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.summary.txt"),
        thresholds=temp("qc/mosdepth_bed/{sample}_{type}.thresholds.bed.gz"),
    params:
        thresholds="10,20,30",


use rule multiqc from qc as qc_multiqc with:
    input:
        files=lambda wildcards: set(
            [
                file.format(sample=sample, type=u.type, lane=u.lane, flowcell=u.flowcell, barcode=u.barcode, read=read, ext=ext)
                for file in config["multiqc"]["reports"][wildcards.report]["qc_files"]
                for sample in get_samples(samples)
                for u in units.loc[sample].dropna().itertuples()
                if u.type in config["multiqc"]["reports"][wildcards.report]["included_unit_types"]
                for read in ["fastq1", "fastq2"]
                for ext in config.get("picard_collect_multiple_metrics", {}).get("output_ext", [""])
            ]
        ),
        config=lambda wildcards: config["multiqc"]["reports"][wildcards.report]["config"],
        sample_order="config/sample_order.tsv",
        sample_replacement="config/sample_replacement.tsv",
    params:
        extra=lambda wildcards, input: "--replace-names "
        + input.sample_replacement
        + " --sample-names "
        + input.sample_order
        + " -c "
        + input.config,


use rule peddy from qc as qc_peddy


use rule picard_collect_alignment_summary_metrics from qc as qc_pic_align_sum_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        ref=config["reference"]["fasta"],


use rule picard_collect_duplication_metrics from qc as qc_pic_dup_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],


use rule picard_collect_gc_bias_metrics from qc as qc_pic_gc_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        ref=config["reference"]["fasta"],


use rule picard_collect_hs_metrics from qc as qc_pic_hs_met with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        bait_intervals=config["reference"]["design_intervals"],
        target_intervals=config["reference"]["design_intervals"],
        reference=config["reference"]["fasta"],


use rule picard_collect_insert_size_metrics from qc as qc_pic_ins_size with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],


use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],


use rule samtools_idxstats from qc as qc_samtools_idxstats with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
    output:
        temp("qc/samtools_idxstats/{sample}_{type}.samtools-idxstats.txt"),


module references:
    snakefile:
        get_module_snakefile(
            config,
            "hydra-genetics/references",
            path="workflow/Snakefile",
            tag=config["modules"]["references"],
        )
    config:
        config


use rule exomedepth_bam_list from references as references_exomedepth_bam_list with:
    input:
        bam_list=lambda wildcards: get_bam_list(wildcards, sex=None),
    output:
        bam_list_file="references/exomedepth_bam_list/bam_files.list",


use rule exomedepth_bam_list from references as references_exomedepth_bam_list_male with:
    input:
        bam_list=lambda wildcards: get_bam_list(wildcards, sex="male"),
    output:
        bam_list_file="references/exomedepth_bam_list/male_bam_files.list",


use rule exomedepth_bam_list from references as references_exomedepth_bam_list_female with:
    input:
        bam_list=lambda wildcards: get_bam_list(wildcards, sex="female"),
    output:
        bam_list_file="references/exomedepth_bam_list/female_bam_files.list",


use rule exomedepth_reference from references as references_exomedepth_reference with:
    input:
        bam_list_file="references/exomedepth_bam_list/bam_files.list",
        bam_bai_list=lambda wildcards: get_bam_list(wildcards, sex=None, bai=True),
    output:
        reference="references/exomedepth_reference/Twist2.0_hg38_RefCount.Rdata",


use rule exomedepth_reference from references as references_exomedepth_reference_male with:
    input:
        bam_list_file="references/exomedepth_bam_list/male_bam_files.list",
        bam_bai_list=lambda wildcards: get_bam_list(wildcards, sex="male", bai=True),
    output:
        reference="references/exomedepth_reference/Twist2.0_hg38_RefCount_male.Rdata",


use rule exomedepth_reference from references as references_exomedepth_reference_female with:
    input:
        bam_list_file="references/exomedepth_bam_list/female_bam_files.list",
        bam_bai_list=lambda wildcards: get_bam_list(wildcards, sex="female", bai=True),
    output:
        reference="references/exomedepth_reference/Twist2.0_hg38_RefCount_female.Rdata",


module snv_indels:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/snv_indels", path="workflow/Snakefile", tag=config["modules"]["snv_indels"])
    config:
        config


use rule * from snv_indels as snv_indels_*


use rule bed_split from snv_indels as snv_indels_bed_split with:
    input:
        bed=config.get("deepvariant", {}).get("bed", ""),


use rule bcftools_view from snv_indels as snv_indels_bcftools_view_peddy with:
    input:
        bcf="qc/peddy/all.bcf",
    output:
        vcf=temp("qc/peddy/all.vcf.gz"),
    log:
        "qc/peddy/all.vcf.gz.log",
    benchmark:
        repeat(
            "qc/peddy/all.vcf.gz.benchmark.tsv",
            config.get("bcftools_view", {}).get("benchmark_repeats", 1),
        )


use rule bgzip from snv_indels as snv_indels_bgzip_fix_af with:
    input:
        vcf="{final}.vcf",
    output:
        gz=temp("{final}.vcf.gz"),
    log:
        "{final}.gz.log",
    benchmark:
        repeat(
            "{final}.gz.benchmark.tsv",
            config.get("tabix", {}).get("benchmark_repeats", 1),
        )


use rule tabix from snv_indels as snv_indels_tabix_fix_af with:
    input:
        gz="{final}.vcf.gz",
    output:
        tbi=temp("{final}.vcf.gz.tbi"),
    log:
        "{final}.tbi.log",
    benchmark:
        repeat(
            "{final}.tbi.benchmark.tsv",
            config.get("tabix", {}).get("benchmark_repeats", 1),
        )


use rule deepmosaic_draw from snv_indels as snv_indels_deepmosaic_draw with:
    input:
        annovar=config.get("reference", {}).get("annovar", ""),
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        txt="snv_indels/deepmosaic/{sample}_{type}.input.txt",
        vcf="snv_indels/bcftools_view/{sample}_{type}.ds.vcf.gz",


use rule deepmosaic_input from snv_indels as snv_indels_deepmosaic_input with:
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        sex="qc/peddy/peddy.sex_check.csv",
        vcf="snv_indels/bcftools_view/{sample}_{type}.ds.vcf.gz",


use rule deepmosaic_predict from snv_indels as snv_indels_deepmosaic_predict


use rule deepvariant from snv_indels as snv_indels_deepvariant with:
    input:
        bam="alignment/picard_mark_duplicates/{sample}_{type}_{chr}.bam",
        bai="alignment/picard_mark_duplicates/{sample}_{type}_{chr}.bam.bai",
        ref=config.get("reference", {}).get("fasta", ""),
        bed="snv_indels/bed_split/design_bedfile_{chr}.bed",
    params:
        model_type=config.get("deepvariant", {}).get("model_type", ""),
        output_gvcf=lambda wildcards: get_gvcf_output(wildcards, "deepvariant"),
        int_res=lambda wildcards: f"snv_indels/deepvariant/{wildcards.sample}_{wildcards.type}_{wildcards.chr}",
        regions=lambda wildcards, input: f" --regions {input.bed} ",
        extra=config.get("deepvariant", {}).get("extra", ""),


use rule deepsomatic_t_only from snv_indels as snv_indels_deepsomatic_t_only


use rule fix_af from snv_indels as snv_indels_fix_af with:
    input:
        vcf=lambda wildcards: get_vcf_input(wildcards),
    output:
        vcf=temp("vcf_final/{sample}_{type}.fix_af.vcf"),
    log:
        "vcf_final/{sample}_{type}.fix_af.vcf.log",
    benchmark:
        repeat(
            "vcf_final/{sample}_{type}.fix_af.vcf.benchmark.tsv",
            config.get("fix_af", {}).get("benchmark_repeats", 1),
        )


use rule glnexus from snv_indels as snv_indels_glnexus_peddy with:
    input:
        gvcfs=lambda wildcards: get_gvcf_list(wildcards),
    output:
        bcf=temp("qc/peddy/all.bcf"),
        dir=temp(directory("qc/peddy/GLnexus_peddy.DB")),
    params:
        extra=config.get("glnexus_peddy", {}).get("extra", ""),
        glnexus_config=config.get("glnexus_peddy", {}).get("configfile", ""),
        in_gvcf=lambda wildcards, input: get_glnexus_input(wildcards, input),
    log:
        "qc/peddy/all.bcf.log",
    benchmark:
        repeat(
            "qc/peddy/all.bcf.benchmark.tsv",
            config.get("glnexus_peddy", {}).get("benchmark_repeats", 1),
        )
    container:
        config.get("glnexus_peddy", {}).get("container", config["default_container"])


use rule glnexus from snv_indels as snv_indels_glnexus_trio with:
    input:
        gvcfs=lambda wildcards: get_gvcf_trio(wildcards),
    output:
        bcf=temp("snv_indels/glnexus/{sample}_{type}.bcf"),
        dir=temp(directory("snv_indels/glnexus/{sample}_{type}/GLnexus.DB")),
    params:
        extra=config.get("glnexus_trio", {}).get("extra", ""),
        glnexus_config=config.get("glnexus_trio", {}).get("configfile", ""),
        in_gvcf=lambda wildcards, input: get_glnexus_input(wildcards, input),
    log:
        "snv_indels/glnexus/{sample}_{type}.bcf.log",
    benchmark:
        repeat(
            "snv_indels/glnexus/{sample}_{type}.bcf.benchmark.tsv",
            config.get("glnexus_trio", {}).get("benchmark_repeats", 1),
        )
    container:
        config.get("glnexus_trio", {}).get("container", config["default_container"])


use rule mosaicforecast_input from snv_indels as snv_indels_mosaicforecast_input with:
    input:
        vcf="snv_indels/bcftools_view/{sample}_{type}.ds.vcf.gz",


use rule vt_decompose from snv_indels as snv_indels_vt_decompose with:
    input:
        vcf="snv_indels/glnexus/{sample}_{type}.vcf.gz",
    output:
        vcf=temp("snv_indels/glnexus/{sample}_{type}.decomposed.vcf.gz"),
    log:
        "snv_indels/glnexus/{sample}_{type}.decomposed.vcf.gz.log",
    benchmark:
        repeat(
            "snv_indels/glnexus/{sample}_{type}.decomposed.vcf.gz.benchmark.tsv",
            config.get("vt_decompose", {}).get("benchmark_repeats", 1),
        )
